{"version":3,"sources":["reducers.js","context.js","form.js","todo.js","App.js","serviceWorker.js","index.js"],"names":["reducer","state","action","type","id","uuid","todo","content","filter","ContextHandler","createContext","Context","props","useReducer","data","localStorage","getItem","JSON","parse","todos","dispatch","useEffect","setItem","stringify","Provider","value","children","Form","useContext","useState","str","setStr","className","onSubmit","e","preventDefault","placeholder","onChange","target","Todo","length","map","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yMAEaA,EAAU,SAACC,EAAOC,GAC3B,OAAOA,EAAOC,MACV,IAAK,MACD,MAAM,CAAE,CAACC,GAAGC,MAAQC,KAAMJ,EAAOK,UAAjC,mBAA+CN,IACnD,IAAK,MACD,OAAOA,EAAMO,QAAO,SAAAF,GAAI,OAAIA,EAAKF,KAAOF,EAAOE,MACnD,QACI,MAAO,KCLNK,EAAiBC,0BAEvB,SAASC,EAAQC,GAAQ,IAAD,EACAC,qBAAWb,EAAS,IAAI,WAC/C,IAAMc,EAAOC,aAAaC,QAAQ,SAClC,OAAOF,EAAOG,KAAKC,MAAMJ,GAAO,MAHT,mBACpBK,EADoB,KACbC,EADa,KAS3B,OAHAC,qBAAU,WACNN,aAAaO,QAAQ,QAASL,KAAKM,UAAUJ,MAC9C,CAACA,IAEA,kBAACV,EAAee,SAAhB,CAAyBC,MAAS,CAACN,QAAOC,aACpCR,EAAMc,UCdL,SAASC,IAAQ,IACpBP,EAAaQ,qBAAWnB,GAAxBW,SADmB,EAEJS,mBAAS,IAFL,mBAEpBC,EAFoB,KAEfC,EAFe,KAG3B,OACI,yBAAKC,UAAU,aACX,0BAAMC,SAAa,SAACC,GAAOA,EAAEC,iBAAqBL,GAAIV,EAAS,CAACjB,KAAM,MAAOI,QAASuB,IAAMC,EAAO,MAC/F,yBAAKC,UAAU,sBACX,2BAAO7B,KAAK,OAAO6B,UAAU,kBAAkBP,MAAOK,EAAKM,YAAY,eAAeC,SAAU,SAACH,GAAD,OAAKH,EAAOG,EAAEI,OAAOb,UACrH,2BAAOtB,KAAK,SAAS6B,UAAU,kBCPpC,SAASO,EAAK3B,GAAQ,IAAD,EACJgB,qBAAWnB,GAA/BU,EADwB,EACxBA,MAAOC,EADiB,EACjBA,SAEf,OACI,yBAAKY,UAAU,aACX,wBAAIA,UAAU,sBAAd,mBACA,kBAACL,EAAD,MACA,wBAAIK,UAAU,cAENb,EAAMqB,OACFrB,EAAMsB,KAAI,SAAAnC,GAAI,OACV,wBAAIoC,IAAOpC,EAAKF,GAAI4B,UAAY,mBAC5B,uBAAGA,UAAU,gCAAgCW,QAAS,SAAAT,GAAMd,EAAS,CAACjB,KAAK,MAAOC,GAAIE,EAAKF,OAA3F,SACA,8BAAOE,EAAKA,UAIpB,wBAAI0B,UAAU,mBAAd,8BCPTY,MAVf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAACrB,EAAD,KACE,kBAAC4B,EAAD,SCIYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c6dfc1bc.chunk.js","sourcesContent":["import uuid from 'uuid/v1'\r\n\r\nexport const reducer = (state, action) => {\r\n    switch(action.type){\r\n        case 'ADD':\r\n            return [{id:uuid(), todo: action.content }, ...state];\r\n        case \"DEL\":\r\n            return state.filter(todo => todo.id !== action.id );\r\n        default:\r\n            return [];\r\n    }\r\n}","import React, { createContext, useReducer, useEffect } from 'react'\r\nimport { reducer } from './reducers';\r\n\r\n\r\nexport const ContextHandler = createContext();\r\n\r\nexport function Context(props) {\r\n    const [todos, dispatch ] = useReducer(reducer, [], () => {\r\n        const data = localStorage.getItem('todos');\r\n        return data ? JSON.parse(data): [];\r\n    });\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(todos));\r\n    }, [todos])\r\n    return (\r\n        <ContextHandler.Provider value = {{todos, dispatch}}>\r\n            { props.children }\r\n        </ContextHandler.Provider>\r\n    )\r\n}\r\n","import React, { useContext, useState } from 'react'\r\nimport { ContextHandler } from './context'\r\n\r\nexport default function Form() {\r\n    const { dispatch } = useContext(ContextHandler);\r\n    const [str, setStr ] = useState('');\r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit = { (e) => {e.preventDefault(); if(str)dispatch({type: 'ADD', content: str});setStr('');}}>\r\n                <div className=\"input-field center\">\r\n                    <input type=\"text\" className=\"validate center\" value={str} placeholder=\"Add reminder\" onChange={(e)=>setStr(e.target.value)}/>\r\n                    <input type=\"submit\" className=\"btn center\"/>\r\n                </div>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { ContextHandler } from './context'\r\nimport Form from './form';\r\n\r\nexport default function Todo(props) {\r\n    const { todos, dispatch } = useContext(ContextHandler);\r\n    // console.log(todos);\r\n    return (\r\n        <div className=\"container\">\r\n            <h3 className=\"indigo-text center\">Add Reminder...</h3>\r\n            <Form />\r\n            <ul className=\"collection\">\r\n                {\r\n                    todos.length ? (\r\n                        todos.map(todo => (\r\n                            <li key = {todo.id} className = \"collection-item\">\r\n                                <i className=\"material-icons right red-text\" onClick={e => {dispatch({type:\"DEL\", id: todo.id})}}>clear</i>\r\n                                <span>{todo.todo}</span>\r\n                            </li>\r\n                        ))\r\n                    ) : (\r\n                        <li className=\"collection-item\">You have no reminder set</li>\r\n                    )\r\n                    \r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport Todo from './todo';\nimport { Context } from './context'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Context>\n        <Todo />      \n      </Context>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}